#+title: init.org
#+startup: overview

* Bootstrap
** eary-init.el
*** 起動時間短縮のための設定
#+begin_src emacs-lisp :tangle early-init.el
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq gc-cons-percentage 1.0)
(setq gc-cons-threshold most-positive-fixnum)

(defun e:emacs-startup-config ()
  (setq file-name-handler-alist default-file-name-handler-alist)
  (setq gc-cons-percentage 0.1)
  (setq gc-cons-threshold 1000000000))
(add-hook 'emacs-startup-hook #'e:emacs-startup-config)
#+end_src
*** 不要なUI要素を非表示
#+begin_src emacs-lisp :tangle early-init.el
(menu-bar-mode   -1)
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
#+end_src
*** 未ロードならロードする
#+begin_src emacs-lisp
(unless early-init-file
  (load (expand-file-name "early-init" user-emacs-directory)))
#+end_src
** 設定で使用するマクロ定義
*** e:default!
#+begin_src emacs-lisp
(defmacro e:default! (variable default)
  `(setq-default ,variable ,default))
#+end_src
*** e:local!
#+begin_src emacs-lisp
(defmacro e:local! (variable value)
  `(setq-local ,variable ,value))
#+end_src
*** e:variable!
#+begin_src emacs-lisp
(defmacro e:variable! (variable value)
  `(set-variable ',variable ,value))
#+end_src
*** e:if!
#+begin_src emacs-lisp
(defmacro e:if! (condition &rest body)
  (declare (indent defun))
  (if condition
      `(progn ,@body)))
#+end_src
** 起動ディレクトリの調整
#+begin_src emacs-lisp
(e:variable! user-emacs-directory (file-name-directory (or load-file-name buffer-file-name)))
(e:variable! no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory))
(e:variable! no-littering-var-directory (expand-file-name "var/" user-emacs-directory))
#+end_src
** パッケージ関連の設定
#+begin_src emacs-lisp
(e:variable! package-archives
             '(("melpa"  . "https://melpa.org/packages/")
               ("org"    . "https://orgmode.org/elpa/")
               ("gnu"    . "https://elpa.gnu.org/packages/")
               ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
(e:variable! package-user-dir (expand-file-name (format "elpa/%s" emacs-version) no-littering-var-directory))

(when (require 'package)
  (package-initialize)
  (unless (package-installed-p 'leaf)
    (package-refresh-contents)
    (package-install 'leaf)))
#+end_src
** ライブラリ
#+begin_src emacs-lisp
(leaf cl-lib :ensure t :require t)
(leaf dash   :ensure t :require t)
(leaf f      :ensure t :require t)
(leaf s      :ensure t :require t)
(leaf no-littering :ensure t :require t)

(leaf general
  :ensure t
  :require t
  :config
  (general-evil-setup))
#+end_src
* Config: Misc
** Mac
#+begin_src emacs-lisp
(e:if! (eq system-type 'darwin)
  ;; タイトルバーの見た目を変更
  (--each '((ns-transparent-titlebar . t)
            (ns-appearance . dark))
    (assq-delete-all (car it) initial-frame-alist)
    (assq-delete-all (car it) default-frame-alist)
    (add-to-list 'initial-frame-alist it)
    (add-to-list 'default-frame-alist it))
  ;; 特殊キーの設定
  (e:variable! ns-command-modifier 'meta)
  (e:variable! ns-right-command-modifier 'super)
  (e:variable! ns-alternate-modifier 'none)
  ;; ちょっと行間を広げる
  (e:default! line-spacing 2))
#+end_src
** Japanese
#+begin_src emacs-lisp
(set-language-environment "Japanese")
#+end_src
** Encodiing
#+begin_src emacs-lisp
(let ((coding-system 'utf-8))
  (prefer-coding-system          coding-system)
  (set-buffer-file-coding-system coding-system))
#+end_src
** Locale
#+begin_src emacs-lisp
(let ((value "ja_JP.UTF-8"))
  (setenv "LANG" value)
  (setenv "LC_ALL" value))
#+end_src
** Font
#+begin_src emacs-lisp
(let ((font "Cica"))
  (set-frame-font (font-spec :name font :size 16.0) nil t)
  (set-face-attribute 'fixed-pitch       nil :family font)
  (set-face-attribute 'fixed-pitch-serif nil :family font)
  (set-face-attribute 'variable-pitch    nil :family font))
#+end_src
** Alias
#+begin_src emacs-lisp
(defalias 'exit 'save-buffers-kill-terminal)
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Config: Emacs
** C Sources
#+begin_src emacs-lisp
(e:default! bidi-display-reordering nil)
(e:default! fill-column 100)
(e:default! truncate-lines t)
(e:variable! create-lockfiles nil)
(e:variable! delete-by-moving-to-trash nil)
(e:variable! frame-resize-pixelwise t)
(e:variable! history-delete-duplicates t)
(e:variable! ring-bell-function #'ignore)
(e:variable! shell-file-name
             (or (executable-find "zsh")
                 (executable-find "bash")
                 (executable-find "sh")))
(e:variable! system-time-locale "C")
(e:variable! truncate-partial-width-windows nil)
(e:variable! window-resize-pixelwise t)
#+end_src
** cus-edit
#+begin_src emacs-lisp
(leaf cus-edit
  :config
  (e:variable! custom-file (make-temp-file "emacs-custom-" nil ".el")))
#+end_src
* Config: Themes
** modus-themes
#+begin_src emacs-lisp
(leaf modus-themes
  :ensure t
  :init
  (modus-themes-load-themes)
  (modus-themes-load-vivendi))
#+end_src
* Config: Evil
** evil
#+begin_src emacs-lisp :noweb yes
(leaf evil
  :ensure (evil evil-collection)
  :require t
  :init
  (e:variable! evil-cross-lines t)
  (e:variable! evil-disable-insert-state-bindings t)
  (e:variable! evil-move-beyond-eol t)
  (e:variable! evil-move-cursor-back nil)
  (e:variable! evil-want-keybinding nil)
  :config
  (evil-mode)
  <<evil-collection>>)
#+end_src
** evil-collection
#+name: evil-collection
#+begin_src emacs-lisp :tangle no
(leaf evil-collection
  :config
  (evil-collection-init))
#+end_Src
* Config: Packages
** ace-window
#+begin_src emacs-lisp
(leaf ace-window
  :ensure t
  :defer-config
  (e:variable! aw-keys (number-sequence ?1 ?9))
  (e:variable! aw-scope 'frame))
#+end_src
** affe
#+begin_src emacs-lisp
(leaf affe
  :ensure t
  :defvar (affe-find-command)
  :defer-config
  (e:variable! affe-find-command (or (executable-find "fd") affe-find-command))
  (e:variable! affe-regexp-function 'orderless-pattern-compiler)
  (e:variable! affe-highlight-function 'orderless--highlight))
#+end_src
** atomic-chrome
#+begin_src emacs-lisp
(leaf atomic-chrome
  :ensure t
  :hook (emacs-startup-hook . atomic-chrome-start-server))
#+end_src
** avy
#+begin_src emacs-lisp
(leaf avy
  :ensure t
  :defer-config
  (e:variable! avy-keys (number-sequence ?a ?z))
  (e:variable! avy-all-windows nil)
  (e:variable! avy-all-windows-alt t))
#+end_src
** beacon
#+begin_src emacs-lisp
(leaf beacon
  :ensure t
  :hook (emacs-startup-hook . beacon-mode))
#+end_src
** cape
#+begin_src emacs-lisp
(require 'company-org-block)
(leaf cape
  :ensure t
  :commands (e:capf-functions e:cape-org-block e:cape-tabnine)
  :config
  (defalias 'e:cape-org-block
    (cape-company-to-capf #'company-org-block))
  (defalias 'e:cape-tabnine
    (cape-company-to-capf #'company-tabnine))
  (defun e:capf-functions (default-capf)
    (let ((default-capf-with-tabnine (intern (format "%s-with-tabnine" default-capf))))
      (defalias default-capf-with-tabnine
	(cape-super-capf
	 default-capf
	 #'e:cape-tabnine))
      (list #'cape-file
	    default-capf-with-tabnine
	    #'cape-dabbrev))))
#+end_src
** company
*** company-org-block
#+begin_src emacs-lisp
(leaf company-org-block
  :ensure t
  :commands (company-org-block)
  :config
  (e:variable! company-org-block-edit-style 'inline))
#+end_src
*** company-tabnine
#+begin_src emacs-lisp
(leaf company-tabnine
  :ensure t)
#+end_src
** consult
#+begin_src emacs-lisp
(leaf consult
  :ensure t)
#+end_src
** corf
*** corf
#+begin_src emacs-lisp :noweb yes
(leaf corfu
  :ensure (corfu corfu-doc)
  :bind (:corfu-map
         ("<escape>" . corfu-quit))
  :hook ((prog-mode-hook . e:setup-capf/default)
         (org-mode-hook  . e:setup-capf/org)
         (lsp-completion-mode-hook . e:setup-capf/lsp))
  :init
  (e:variable! corfu-auto t)
  :config
  (defun e:setup-capf/default ()
    (setq-local completion-at-point-functions
                (e:capf-functions (car completion-at-point-functions)))
    (corfu-mode 1))
  (defun e:setup-capf/org ()
    (setq-local completion-at-point-functions
                (e:capf-functions #'e:cape-org-block))
    (corfu-mode 1))
  (defun e:setup-capf/lsp ()
    (setq-local completion-at-point-functions
                (e:capf-functions #'lsp-completion-at-point))
    (corfu-mode 1))
  <<corfu-doc>>
  <<corfu-with-evil>>)
#+end_src
*** corfu-doc
#+name: corfu-doc
#+begin_src emacs-lisp :tangle no
(leaf corfu-doc
  :hook (corfu-mode-hook . corfu-doc-mode))
#+end_src
*** corfu-with-evil
#+name: corfu-with-evil
#+begin_src emacs-lisp :tangle no
(leaf corfu-with-evil
  :after (evil)
  :config
  (evil-make-overriding-map corfu-map)
  (advice-add 'corfu--setup :after 'evil-normalize-keymaps)
  (advice-add 'corfu--teardown :after 'evil-normalize-keymaps))
#+end_src
** dired
#+begin_src emacs-lisp
(leaf dired
  :bind ((:dired-mode-map
          ("C-c C-e" . wdired-change-to-wdired-mode)))
  :config
  (eval-when-compile (require 'dired))
  (e:variable! dired-dwim-target t)
  (e:variable! dired-kill-when-opening-new-dired-buffer t)
  (e:variable! dired-listing-switches "-Ahl")
  (e:variable! dired-omit-files (rx (or (seq bol (? ".") "#")
                                        (seq bol (or "." "..") eol)
                                        (seq bol ".DS_Store" eol))))
  (e:variable! dired-recursive-copies 'always)
  (e:variable! dired-recursive-deletes 'always)
  (e:variable! ls-lisp-dirs-first t)
  (e:variable! ls-lisp-format-time-list '("%Y-%m-%d %H:%M:%S" "%Y-%m-%d %H:%M:%S"))
  (e:variable! ls-lisp-ignore-case nil)
  (e:variable! ls-lisp-use-insert-directory-program nil)
  (e:variable! ls-lisp-use-localized-time-format t)
  (e:variable! ls-lisp-verbosity '(uid gid)))
#+end_src
** flycheck
#+begin_src emacs-lisp
(leaf flycheck
  :ensure t)
#+end_src
** helpful
#+begin_src emacs-lisp
(leaf helpful
  :ensure t)
#+end_src
** helm
#+begin_src emacs-lisp
(leaf helm
  :ensure t
  :bind (([remap eval-expression] . helm-eval-expression-with-eldoc)))
#+end_src
** lsp-mode
#+begin_src emacs-lisp
(leaf lsp-mode
  :ensure t)
#+end_src
** magit
*** magit
#+begin_src emacs-lisp :noweb yes
(leaf magit
  :ensure (magit magit-libgit)
  :defun (magit-add-section-hook)
  :defer-config
  (e:variable! magit-delete-by-moving-to-trash nil)
  (e:variable! magit-diff-refine-hunk 'all)
  (e:variable! magit-diff-refine-ignore-whitespace t)
  (e:variable! magit-log-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width t 15))
  (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules-overview    'magit-insert-stashes t)
  (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-skip-worktree-files 'magit-insert-stashes t)
  <<magit-libgit>>)
#+end_src
*** magit-libgit
#+name: magit-libgit
#+begin_src emacs-lisp :tangle no
(leaf magit-libgit
  :config
  (libgit-load))
#+end_src
** marginalia
#+begin_src emacs-lisp
(leaf marginalia
  :ensure t
  :hook (emacs-startup-hook . marginalia-mode))
#+end_src
** minions
#+begin_src emacs-lisp
(leaf minions
  :ensure t
  :hook (emacs-startup-hook . minions-mode))
#+end_src
** orderless
#+begin_src emacs-lisp
(leaf orderless
  :ensure t
  :init
  (setq completion-styles '(orderless))
  (setq orderless-matching-styles '(orderless-literal orderless-regexp orderless-migemo))
  :defer-config
  (defun orderless-migemo (component)
    (when (fboundp 'migemo-get-pattern)
      (let ((pattern (migemo-get-pattern component)))
        (condition-case nil
            (progn (string-match-p pattern "") pattern)
          (invalid-regexp nil))))))
#+end_src
** org-mode
#+begin_src emacs-lisp
(leaf org
  :ensure (org-modern)
  :hook (org-mode-hook . org-modern-mode)
  :defer-config
  (e:variable! org-edit-src-content-indentation 0))
#+end_src
** projectile
#+begin_src emacs-lisp
(leaf projectile
  :ensure t)
#+end_src
** recentf
#+begin_src emacs-lisp
(leaf recentf
  :hook (emacs-startup-hook . recentf-mode)
  :config
  (eval-when-compile (require 'recentf))
  (e:variable! recentf-filename-handlers '(abbreviate-file-name))
  (e:variable! recentf-max-menu-items 20)
  (e:variable! recentf-max-saved-items 3000)
  (define-advice recentf-save-list (:before (&rest _) cleanup)
    "存在しないファイルを履歴から削除する"
    (setq recentf-list (->> recentf-list
                            (-map 'f-short)
                            (-distinct)
                            (--filter (and (or (file-remote-p it)
                                               (f-exists? it))
                                           (recentf-include-p it)))))))
#+end_src
** transient
#+begin_src emacs-lisp
(leaf transient
  :ensure t)
#+end_src
** vertico
#+begin_src emacs-lisp
(leaf vertico
  :ensure t
  :hook (emacs-startup-hook . vertico-mode)
  :config
  (e:variable! vertico-count 20)
  (e:variable! vertico-cycle t))
#+end_src
** vterm
#+begin_src emacs-lisp
(leaf vterm
  :ensure (vterm vterm-toggle)
  :bind (:vterm-mode-map
         ("C-c C-g" . keyboard-quit)
         ("C-g" . vterm-send-C-g)
         ("<wheel-up>" . ignore)
         ("<wheel-down>" . ignore))
  :config
  (e:variable! vterm-max-scrollback 20000)
  (e:variable! vterm-shell "tmux new -A -s emacs"))
#+end_src
** which-key
#+begin_src emacs-lisp
(leaf which-key
  :ensure t
  :hook (emacs-startup-hook . which-key-mode)
  :init
  (e:variable! which-key-show-early-on-C-h t)
  (e:variable! which-key-sort-order 'which-key-key-order-alpha))
#+end_src
** winum
#+begin_src emacs-lisp
(leaf winum
  :ensure t
  :hook (emacs-startup-hook . winum-mode))
#+end_src
* Config: Major modes
** Ruby
#+begin_src emacs-lisp
(leaf ruby-mode
  :ensure t
  :hook (ruby-mode-hook . lsp-deferred)
  :config
  (e:variable! ruby-insert-encoding-magic-comment nil))
#+end_src
** TypeScript(tsx)
#+begin_src emacs-lisp
(leaf typescript-tsx-mode
  :ensure web-mode
  :hook (typescript-tsx-mode-hook . lsp-deferred)
  :mode "\\.tsx\\'"
  :init
  (define-derived-mode typescript-tsx-mode web-mode "TypeScript[tsx]"))
#+end_src
** Vue
#+begin_src emacs-lisp
(leaf vue-mode
  :ensure t
  :hook (vue-mode-hook . lsp-deferred))
#+end_src
* Config: Keybinds
** Space
#+begin_src emacs-lisp
(general-mmap "," (general-simulate-key "SPC m"))
(general-mmap
 :prefix "SPC"
 :prefix-command (define-prefix-command 'e:root-command-map)
 "SPC" '(execute-extended-command :which-key "M-x")
 "!" 'shell-command
 "%" 'query-replace
 "&" 'async-shell-command
 "^" 'ace-window
 "|" 'shell-command-on-region
 "1" '(winum-select-window-1 :which-key "window 1")
 "2" '(winum-select-window-2 :which-key "window 2")
 "3" '(winum-select-window-3 :which-key "window 3")
 "4" '(winum-select-window-4 :which-key "window 4")
 "5" '(winum-select-window-5 :which-key "window 5")
 "6" '(winum-select-window-6 :which-key "window 6")
 "7" '(winum-select-window-7 :which-key "window 7")
 "8" '(winum-select-window-8 :which-key "window 8")
 "9" '(winum-select-window-9 :which-key "window 9")
 "F" '(:ignore t :which-key "Frame")
 "Fn" 'make-frame
 "Fo" 'other-frame
 "a" '(:ignore t :which-key "Application")
 "b" '(:ignore t :which-key "Buffer")
 "bb" 'consult-buffer
 "bd" 'kill-buffer
 "bw" 'read-only-mode
 "f" '(:ignore t :which-key "File")
 "ff" 'find-file
 "fg" 'affe-grep
 "fr" 'recentf-open-files
 "fs" 'save-buffer
 "fz" 'affe-find
 "g" '(:ignore t :which-key "Git/VC")
 "gs" 'magit-status
 "h" '(:ignore t :which-key "Help")
 "hd" '(:ignore t :which-key "describe")
 "hda" 'consult-apropos
 "hdf" 'describe-function
 "hdk" 'describe-key
 "hdv" 'describe-variable
 "hh" '(:ignore t :which-key "helpful")
 "hhc" 'helpful-callable
 "hhf" 'helpful-function
 "hhh" 'helpful-at-point
 "hhi" 'helpful-command
 "hhk" 'helpful-key
 "hhm" 'helpful-macro
 "hhs" 'helpful-symbol
 "hhv" 'helpful-variable
 "j" '(:ignore t :which-key "Jump/Join/Split")
 "jd" 'dired-jump
 "ji" 'consult-imenu
 "m" '(:ignore t :which-key "Major mode")
 "o" '(:ignore t :which-key "Org")
 "p" '(:ignore t :which-key "Project")
 "p!" 'projectile-run-shell-command-in-root
 "p%" 'projectile-replace-regexp
 "p&" 'projectile-run-async-shell-command-in-root
 "pD" 'projectile-dired
 "pF" 'projectile-find-file-dwim
 "pG" 'projectile-regenerate-tags
 "pI" 'projectile-invalidate-cache
 "pR" 'projectile-replace
 "pT" 'projectile-test-project
 "pa" 'projectile-toggle-between-implementation-and-test
 "pb" 'projectile-switch-to-buffer
 "pc" 'projectile-compile-project
 "pd" 'projectile-find-dir
 "pe" 'projectile-edit-dir-locals
 "pf" 'projectile-find-file
 "pg" 'projectile-find-tag
 "pk" 'projectile-kill-buffers
 "pp" 'projectile-switch-project
 "pr" 'projectile-recentf
 "pv" 'projectile-vc
 "q" '(:ignore t :which-key "Quit")
 "qq" 'kill-emacs
 "s" '(:ignore t :which-key "Search/Symbol")
 "ss" 'consult-line
 "w" '(:ignore t :which-key "Window")
 "w-" 'split-window-below
 "w/" 'split-window-right
 "w1" 'delete-other-windows
 "w=" 'balance-windows
 "wD" 'ace-delete-window
 "wH" 'evil-window-move-far-left
 "wJ" 'evil-window-move-very-bottom
 "wK" 'evil-window-move-very-top
 "wL" 'evil-window-move-far-right
 "wM" 'ace-swap-window
 "wW" 'ace-window
 "wd" 'delete-window
 "wh" 'evil-window-left
 "wj" 'evil-window-down
 "wk" 'evil-window-up
 "wl" 'evil-window-right
 "ww" 'other-window
 "x" '(:ignore t :which-key "Text")
 "xl" '(:ignore t :which-key "lines")
 "xls" 'sort-lines
 )
#+end_src
** Other
*** global-map
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'global-map
 "C-;" 'vterm-toggle
 "C-^" 'ace-window
 )
#+end_src
*** ctl-x-map
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'ctl-x-map
 "C-c" 'execute-extended-command
 )
#+end_src
