#+title: init.org
#+startup: overview
#+property: header-args :tangle init.el :noweb yes :lexical no

* Bootstrap
** 設定ファイルのヘッダー
*** early-init.el
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el
;;; -*- lexical-binding: t -*-
#+end_src
*** init.el
#+begin_src emacs-lisp
;;; init.el
;;; -*- lexical-binding: t -*-
#+end_src
** early-init.el
*** 起動時間短縮のための設定
#+begin_src emacs-lisp :tangle early-init.el
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq gc-cons-percentage 1.0)
(setq gc-cons-threshold most-positive-fixnum)

(defun e:emacs-startup-config ()
  (setq file-name-handler-alist default-file-name-handler-alist)
  (setq gc-cons-percentage 0.1)
  (setq gc-cons-threshold 10485760))
(add-hook 'emacs-startup-hook #'e:emacs-startup-config)
#+end_src
*** 不要なUI要素を非表示
#+begin_src emacs-lisp :tangle early-init.el
(menu-bar-mode   -1)
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
#+end_src
*** ディレクトリ設定
#+begin_src emacs-lisp
(setq user-emacs-directory (file-name-directory (or load-file-name buffer-file-name)))
(defvar no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory))
(defvar no-littering-var-directory (expand-file-name "var/" user-emacs-directory))
#+end_src
*** `package.el' を使用しない
#+begin_src emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil)
#+end_src
*** 未ロードならロードする
#+begin_src emacs-lisp
(unless early-init-file
  (load (expand-file-name "early-init" user-emacs-directory)))
#+end_src
** 起動時間の計測
#+begin_src emacs-lisp
(when init-file-debug
  (require 'profiler)
  (profiler-start 'cpu))
#+end_src
** パッケージ管理
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
(require 'borg)
(borg-initialize)
#+end_src
** マクロ定義
#+begin_src emacs-lisp
(require 'nsmacs-macros)
#+end_src
*** cl-lib
#+begin_src emacs-lisp
(eval-when-compile (require 'cl-lib))
#+end_src
*** e:default!
#+begin_src emacs-lisp
(defmacro e:default! (variable default)
  `(setq-default ,variable ,default))
#+end_src
*** e:local!
#+begin_src emacs-lisp
(defmacro e:local! (variable value)
  `(setq-local ,variable ,value))
#+end_src
*** e:var!
#+begin_src emacs-lisp
(defmacro e:var! (variable value)
  `(setopt ,variable (no-littering-expand-var-file-name ,value)))
#+end_src
*** e:if!
#+begin_src emacs-lisp
(defmacro e:if! (condition &rest body)
  (declare (indent defun))
  (if (eval condition)
      `(progn ,@body)))
#+end_src
*** e:eval!
#+begin_src emacs-lisp
(defmacro e:eval! (&rest body)
  (declare (indent defun))
  `(eval '(progn ,@body)))
#+end_src
*** e:deferred-config!
#+begin_src emacs-lisp
(defvar e:high-priority-config-queue nil)
(defvar e:low-priority-config-queue nil)
(defvar e:deferred-config-loaded nil)
(defmacro e:deferred-config! (package &rest body)
  (declare (indent defun))
  (let* ((priority (or (plist-get body :priority) :low))
         (queue (if (eq priority :high) 'e:high-priority-config-queue 'e:low-priority-config-queue))
         (fn-name (intern (format "e:package-config-%s!" package))))
    `(let ((fn (defun ,fn-name () (leaf ,package ,@body))))
       (if e:deferred-config-loaded
           (funcall fn)
         (setq ,queue (append ,queue (list fn)))))))
#+end_src
*** e:mode-key-def
#+begin_src emacs-lisp
(defmacro e:major-mode-key-def (modes key def &rest bindings)
  (declare (indent defun))
  `(e:mode-key-def :major-modes ,modes ,key ,def ,@bindings))
(defmacro e:minor-mode-key-def (modes key def &rest bindings)
  (declare (indent defun))
  `(e:mode-key-def :minor-modes ,modes ,key ,def ,@bindings))
(defmacro e:mode-key-def (mode-key modes key def &rest bindings)
  (declare (indent defun))
  (let* ((modes (if (listp modes) modes (list modes)))
         (mode (or (car-safe modes) modes))
         (command (intern (format "e:%s-command" mode)))
         (map (intern (format "e:%s-command-map" mode)))
         (prefix-bindings nil)
         (general-bindings nil))
    (while key
      (if (stringp def)
          (setq prefix-bindings (append prefix-bindings (list key def)))
        (setq general-bindings (append general-bindings (list key def))))
      (setq key (pop bindings)
            def (pop bindings)))
    `(progn
       (bind-map ,map
         :prefix-cmd ,command
         ,mode-key ,modes
         :keys ("M-<return>" "M-m m")
         :evil-keys ("," "SPC m")
         :evil-states (motion normal visual))
       (general-def ,map ,@general-bindings)
       ,(when prefix-bindings
         `(which-key-add-keymap-based-replacements ,map
            ,@prefix-bindings)))))
#+end_src
*** e:define-minor-mode-switch
#+begin_src emacs-lisp
(defmacro e:define-minor-mode-switch (minor-mode)
  `(progn
     (defun ,(intern (format "%s-on" minor-mode)) ()
       ,(format "[generated] Turn on `%s'" minor-mode)
       (interactive)
       (,minor-mode 1))
     (defun ,(intern (format "%s-off" minor-mode)) ()
       ,(format "[generated] Turn off `%s'" minor-mode)
       (interactive)
       (,minor-mode 0))))
#+end_src
** ライブラリ
#+begin_src emacs-lisp
(require 'komunan-lisp-library)
(require 'f)
(require 's)
(require 'ht)
(require 'leaf)
(require 'general)
(require 'bind-map)
(require 'hercules)
(require 'no-littering)
#+end_src
** 環境設定
*** Theme
#+begin_src emacs-lisp
(require-theme 'modus-themes)
(load-theme 'modus-vivendi :no-confirm)
#+end_src
*** Font
#+begin_src emacs-lisp
(let ((font "UDEV Gothic NF")
      (size (if (eq system-type 'darwin) 16.0 12.0)))
  (set-frame-font (font-spec :name font :size size) nil t)
  (set-face-attribute 'fixed-pitch       nil :family font)
  (set-face-attribute 'fixed-pitch-serif nil :family font)
  (set-face-attribute 'variable-pitch    nil :family font))
#+end_src
*** Japanese
#+begin_src emacs-lisp
(set-language-environment "Japanese")
#+end_src
*** Encoding
#+begin_src emacs-lisp
(let ((coding-system 'utf-8))
  (prefer-coding-system          coding-system)
  (set-buffer-file-coding-system coding-system))
#+end_src
*** Locale
#+begin_src emacs-lisp
(let ((value "ja_JP.UTF-8"))
  (setenv "LANG" value)
  (setenv "LC_ALL" value))
#+end_src
*** Mac
#+begin_src emacs-lisp
(e:if! (eq system-type 'darwin)
  ;; タイトルバーの見た目を変更
  ;; (--each '((ns-transparent-titlebar . t)
  ;;           (ns-appearance . dark))
  ;;   (assq-delete-all (car it) initial-frame-alist)
  ;;   (assq-delete-all (car it) default-frame-alist)
  ;;   (add-to-list 'initial-frame-alist it)
  ;;   (add-to-list 'default-frame-alist it))
  ;; 特殊キーの設定
  (setopt ns-command-modifier 'meta)
  (setopt ns-right-command-modifier 'super)
  (setopt ns-alternate-modifier 'none)
  ;; ちょっと行間を広げる
  (e:default! line-spacing 2))
#+end_src
* Config: Emacs
** startup
#+begin_src emacs-lisp
(setopt inhibit-startup-screen t)
(setopt initial-scratch-message nil)
#+end_src
** Alias
#+begin_src emacs-lisp
(defalias 'exit 'save-buffers-kill-terminal)
#+end_src
** C Sources
#+begin_src emacs-lisp
(e:default! bidi-display-reordering nil)
(e:default! fill-column 100)
(e:default! truncate-lines t)
(setopt create-lockfiles nil)
(setopt delete-by-moving-to-trash nil)
(setopt enable-recursive-minibuffers t)
(setopt frame-resize-pixelwise t)
(setopt history-delete-duplicates t)
(setopt read-process-output-max 1048576)
(setopt ring-bell-function #'ignore)
(setopt scroll-conservatively 101)
(setopt scroll-margin 5)
(setopt scroll-preserve-screen-position t)
(setopt shell-file-name
        (or (executable-find "zsh")
            (executable-find "bash")
            (executable-find "sh")))
(setopt system-time-locale "C")
(setopt truncate-partial-width-windows nil)
(setopt undo-limit 67108864)         ;; => 64mb.
(setopt undo-strong-limit 100663296) ;; => 96mb.
(setopt undo-outer-limit 1006632960) ;; => 960mb.
(setopt use-dialog-box nil)
(setopt use-short-answers t)
(setopt window-resize-pixelwise t)
#+end_src
** auth-source
#+begin_src emacs-lisp
(e:deferred-config! auth-source
  :config
  (setopt auth-sources '("~/.authinfo.json.gpg" "~/.netrc.gpg")))
#+end_src
** auto-revert
#+begin_src emacs-lisp
(e:deferred-config! auto-revert
  :config
  (global-auto-revert-mode 1))
#+end_src
** browse-url
#+begin_src emacs-lisp
(e:deferred-config! browse-url
  :commands (browse-url-by-choosen)
  :defun (browse-url-default-browser)
  :defvar (browse-url-generic-program)
  :defer-config
  (setopt browse-url-browser-function 'browse-url-by-choosen)
  (defun browse-url-by-choosen (url &optional new-window)
    "選択したブラウザで URL を開く."
    (let ((browsers '(eww-browse-url browse-url-default-browser xwidget-webkit-browse-url)))
      (when browse-url-generic-program
        (add-to-list 'browsers 'browse-url-generic t))
      (funcall (intern (completing-read "Choose Browser: " browsers)) url new-window))))
#+end_src
** comp
#+begin_src emacs-lisp
(e:deferred-config! comp
  :defer-config
  (setopt native-comp-async-report-warnings-errors nil))
#+end_src
** compile
#+begin_src emacs-lisp
(e:deferred-config! compile
  :defer-config
  (setopt compilation-scroll-output t))
#+end_src
** cus-edit
#+begin_src emacs-lisp
(e:deferred-config! cus-edit
  :defer-config
  (e:var! custom-file "custom.el"))
#+end_src
** dired
*** dired
#+begin_src emacs-lisp
(e:deferred-config! dired
  :defer-config
  (setopt dired-auto-revert-buffer t)
  (setopt dired-dwim-target t)
  (setopt dired-listing-switches "-Ahl")
  (setopt dired-omit-files (rx (or (seq bol (? ".") "#")
                                        (seq bol (or "." "..") eol)
                                        (seq bol ".DS_Store" eol))))
  (setopt dired-recursive-copies 'always)
  (setopt dired-recursive-deletes 'always))
#+end_src
*** dired-filter
#+begin_src emacs-lisp
(e:deferred-config! dired-filter
  :hook (dired-mode-hook . dired-filter-mode))
#+end_src
*** dired-toggle-sudo
#+begin_src emacs-lisp
(e:deferred-config! dired-toggle-sudo)
#+end_src
*** nerd-icons-dired
#+begin_src emacs-lisp
(e:deferred-config! nerd-icons-dired
  :hook (dired-mode-hook . nerd-icons-dired-mode))
#+end_src
*** ls-lisp-extension
#+begin_src emacs-lisp
(e:deferred-config! ls-lisp-extension
  :after (dired)
  :config
  (setopt ls-lisp-dirs-first t)
  (setopt ls-lisp-format-time-list '("%Y-%m-%d %H:%M:%S" "%Y-%m-%d %H:%M:%S"))
  (setopt ls-lisp-ignore-case nil)
  (setopt ls-lisp-use-insert-directory-program nil)
  (setopt ls-lisp-use-localized-time-format t)
  (setopt ls-lisp-verbosity '(uid gid))
  (ls-lisp-extension-on))
#+end_src
** display-line-numbers
#+begin_src emacs-lisp
(e:deferred-config! display-line-numbers
  :hook ((find-file-hook . display-line-numbers-mode-on)
         (prog-mode-hook . display-line-numbers-mode-on))
  :defer-config
  (e:default! display-line-numbers-width 4)
  (e:define-minor-mode-switch display-line-numbers-mode))
#+end_src
** ediff
#+begin_src emacs-lisp
(e:deferred-config! ediff
  :commands (ediff-setup-windows-plain)
  :defer-config
  (setopt ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src
** emacs-lock
#+begin_src emacs-lisp
(e:deferred-config! emacs-lock
  :config
  (dolist (buffer '("*scratch*" "*Messages*"))
    (with-current-buffer buffer
      (emacs-lock-mode 'kill))))
#+end_src
** epg-config
#+begin_src emacs-lisp
(e:deferred-config! epg-config
  :defer-config
  (setopt epg-pinentry-mode 'loopback))
#+end_src
** eww
#+begin_src emacs-lisp
(e:deferred-config! eww
  :defun (eww-current-url)
  :defer-config
  (general-def eww-mode-map
    "e" 'eww-open-current-url-with-default-browser)
  (setopt eww-search-prefix "https://www.google.com/search?q=")
  (defun eww-open-current-url-with-default-browser ()
    (interactive)
    (browse-url-default-browser (eww-current-url))))
#+end_src
** files
#+begin_src emacs-lisp
(e:deferred-config! files
  :defer-config
  (setopt auto-save-default nil)
  (setopt make-backup-files nil)
  (setopt mode-require-final-newline nil)
  (setopt require-final-newline nil))
#+end_src
** frame
#+begin_src emacs-lisp
(e:deferred-config! frame
  :defer-config
  (blink-cursor-mode 0))
#+end_src
** google-translate
#+begin_src emacs-lisp
(e:deferred-config! google-translate
  :config
  (setopt google-translate-default-source-language "en")
  (setopt google-translate-default-target-language "ja"))
#+end_src
** hl-line
#+begin_src emacs-lisp
(e:deferred-config! hl-line
  :hook ((find-file-hook . hl-line-mode-on)
         (prog-mode-hook . hl-line-mode-on))
  :config
  (e:define-minor-mode-switch hl-line-mode))
#+end_src
** indent
#+begin_src emacs-lisp
(e:deferred-config! indent
  :defer-config
  (setopt standard-indent 2))
#+end_src
** novice
#+begin_src emacs-lisp
(e:deferred-config! novice
  :config
  (setopt disabled-command-function nil))
#+end_src
** recentf
#+begin_src emacs-lisp
(e:deferred-config! recentf
  :advice (:before recentf-save-list ad:recentf-save-list@cleanup)
  :defun (recentf-include-p)
  :defvar (recentf-list)
  :init
  (setopt recentf-filename-handlers '(abbreviate-file-name))
  (setopt recentf-max-menu-items 20)
  (setopt recentf-max-saved-items 3000)
  (defun ad:recentf-save-list@cleanup (&rest _)
    "存在しないファイルを履歴から削除する"
    (setq recentf-list (->> recentf-list
                            (-map 'f-short)
                            (-distinct)
                            (--filter (and (or (file-remote-p it)
                                               (f-exists? it))
                                           (recentf-include-p it))))))
  (recentf-mode 1))
#+end_src
** savehist
#+begin_src emacs-lisp
(e:deferred-config! savehist
  :config
  (savehist-mode 1))
#+end_src
** saveplace
#+begin_src emacs-lisp
(e:deferred-config! save-place
  :config
  (save-place-mode 1))
#+end_src
** simple
#+begin_src emacs-lisp
(e:deferred-config! simple
  :defer-config
  (e:default! indent-tabs-mode nil)
  (setopt set-mark-command-repeat-pop t)
  (column-number-mode 1))
#+end_src
** so-long
#+begin_src emacs-lisp
(e:deferred-config! so-long
  :config
  (global-so-long-mode 1))
#+end_src
** tab-bar-mode
#+begin_src emacs-lisp
(e:deferred-config! tab-bar
  :config
  (tab-bar-mode t))
#+end_src
** timer
#+begin_src emacs-lisp
(e:deferred-config! timer
  :advice (:around cancel-timer ad:cancel-timer@workaround)
  :defer-config
  (defun ad:cancel-timer@workaround (fn &rest args)
    (when (timerp (car args))
      (apply fn args))))
#+end_src
** vc-hooks
#+begin_src emacs-lisp
(e:deferred-config! vc-hooks
  :defer-config
  (setopt vc-follow-symlinks t))
#+end_src
** whitespace
#+begin_src emacs-lisp
(e:deferred-config! whitespace
  :hook ((find-file-hook . whitespace-mode-on)
         (prog-mode-hook . whitespace-mode-on))
  :defer-config
  (setopt whitespace-style '(face
                             trailing
                             tabs
                             tab-mark
                             spaces
                             space-mark
                             newline
                             newline-mark))
  (setopt whitespace-space-regexp "\\(\u3000+\\)")
  (setopt whitespace-display-mappings '((space-mark   ?\u3000 [?\u30ed])
                                        (tab-mark     ?\t     [?\t])
                                        (newline-mark ?\n     [?\u0024 ?\n])))
  (let ((color "#595D63"))
    (set-face-attribute 'whitespace-trailing nil :background "#800000")
    (set-face-attribute 'whitespace-tab      nil :foreground color :strike-through t)
    (set-face-attribute 'whitespace-space    nil :foreground color)
    (set-face-attribute 'whitespace-newline  nil :foreground color))
  (e:define-minor-mode-switch whitespace-mode))
#+end_src
** winner
#+begin_src emacs-lisp
(e:deferred-config! winner
  :config
  (winner-mode 1))
#+end_src
** 個人設定
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (defun e:load-private-config ()
            (let ((private-config (f-expand "private/config" user-emacs-directory)))
              (condition-case err
                  (load private-config)
                (display-warning :warning err)))))
#+end_src
* Config: Evil
** evil
#+begin_src emacs-lisp
(e:deferred-config! evil
  :priority :high
  :defun (evil-get-auxiliary-keymap
          evil-half-cursor
          evil-make-overriding-map
          evil-normal-state
          evil-normalize-keymaps
          evil-set-command-property
          evil-visual-restore)
  :init
  (setopt evil-cross-lines t)
  (setopt evil-disable-insert-state-bindings t)
  (setopt evil-move-beyond-eol t)
  (setopt evil-move-cursor-back nil)
  (setopt evil-shift-width 2)
  (setopt evil-want-Y-yank-to-eol t)
  (setopt evil-want-keybinding nil)
  ;; cursor colors
  (setopt evil-motion-state-cursor  '("plum3" box))
  (setopt evil-normal-state-cursor  '("DarkGoldenrod2" box))
  (setopt evil-visual-state-cursor  '("gray" (hbar . 2)))
  (setopt evil-insert-state-cursor  '("chartreuse3" (bar . 2)))
  (setopt evil-replace-state-cursor '("chocolate" (hbar . 2)))
  (setopt evil-emacs-state-cursor   '("SkyBlue2" box))
  (setopt evil-operator-state-cursor #'evil-half-cursor)
  (evil-mode 1)
  :config
  (defun evil-shift-right-visual ()
    (interactive)
    (call-interactively 'evil-shift-right)
    (evil-normal-state)
    (evil-visual-restore))
  (defun evil-shift-left-visual ()
    (interactive)
    (call-interactively 'evil-shift-left)
    (evil-normal-state)
    (evil-visual-restore))
  (general-def 'motion
    "TAB" nil
    "C-\\" 'ignore
    "C-^" nil)
  (general-def 'normal
    "<down>" 'evil-next-visual-line
    "<up>"   'evil-previous-visual-line
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line)
  (general-def 'visual
    "<" 'evil-shift-left-visual
    ">" 'evil-shift-right-visual)
  (general-def 'insert
    "C-z" nil))
#+end_src
** evil-collection
#+begin_src emacs-lisp
(e:deferred-config! evil-collection
  :after (evil)
  :config
  (evil-collection-init))
#+end_src
** evil-args
#+begin_src emacs-lisp
(e:deferred-config! evil-args
  :config
  (general-def evil-inner-text-objects-map "a" 'evil-inner-arg)
  (general-def evil-outer-text-objects-map "a" 'evil-outer-arg))
#+end_src
** evil-easymotion
#+begin_src emacs-lisp
(e:deferred-config! evil-easymotion
  :after (evil)
  :defvar (evilem-map)
  :config
  (evilem-default-keybindings "s")
  (general-def evilem-map
    "s" 'evil-avy-goto-char-timer)
  (general-def 'normal "s" evilem-map)
  (general-def 'visual "x" evilem-map))
#+end_src
** evil-goggles
#+begin_src emacs-lisp
(e:deferred-config! evil-goggles
  :after (evil)
  :config
  (evil-goggles-mode 1))
#+end_src
** evil-lion
#+begin_src emacs-lisp
(e:deferred-config! evil-lion
  :after (evil)
  :config
  (evil-lion-mode 1))
#+end_src
** evil-mc
#+begin_src emacs-lisp
(e:deferred-config! evil-mc
  :after (evil)
  :config
  (global-evil-mc-mode 1))
#+end_src
** evil-nerd-commenter
#+begin_src emacs-lisp
(e:deferred-config! evil-nerd-commenter
  :after (evil)
  :require t)
#+end_src
** evil-surround
#+begin_src emacs-lisp
(e:deferred-config! evil-surround
  :after (evil)
  :config
  (general-def 'visual evil-surround-mode-map "s" 'evil-surround-region)
  (global-evil-surround-mode 1))
#+end_src
** evil-textobj-tree-sitter
#+begin_src emacs-lisp
(e:deferred-config! evil-textobj-tree-sitter
  :defun (evil-textobj-tree-sitter-function--function.inner
          evil-textobj-tree-sitter-function--function.outer)
  :config
  (general-def evil-inner-text-objects-map
    "f" (e:eval! (evil-textobj-tree-sitter-get-textobj "function.inner")))
  (general-def evil-outer-text-objects-map
    "f" (e:eval! (evil-textobj-tree-sitter-get-textobj "function.outer"))))
#+end_src
* Config: SKK
** skk
#+begin_src emacs-lisp
(e:deferred-config! ddskk
  :advice (:around evil-refresh-cursor ad:evil-refresh-cursor@with-skk)
  :defun (skk-latin-mode-on)
  :defvar (skk-mode-hook)
  :hook ((evil-insert-state-entry-hook . e:skk-mode)
         (evil-insert-state-exit-hook . skk-mode-exit))
  :bind (([remap toggle-input-method] . skk-mode)
         ("C-¥" . skk-mode))
  :init
  (e:var! skk-user-directory "ddskk")
  (setopt ccc-default-cursor-color "DarkGoldenrod2")
  (setopt default-input-method "japanese-skk")
  (setopt skk-egg-like-newline t)
  ;; TODO: 辞書の場所を真面目に考える
  ;; (setopt skk-large-jisyo (f-expand "dic-mirror/SKK-JISYO.L" e:external-directory))
  (setopt skk-share-private-jisyo t)
  (setopt skk-show-annotation t)
  (setopt skk-sticky-key ";")
  ;; (setopt skk-use-azik t)
  (setopt skk-use-jisx0201-input-method t)
  (ccc-setup)
  :defer-config
  (defun e:skk-mode ()
    "skk の有効化で半角英数入力にする"
    (interactive)
    (require 'skk)
    (unless (derived-mode-p 'vterm-mode)
      (if (bound-and-true-p skk-mode)
          (skk-latin-mode-on)
        (let ((skk-mode-hook (-union skk-mode-hook '(skk-latin-mode-on))))
          (skk-mode)))))
  (defun ad:evil-refresh-cursor@with-skk (fn &rest args)
    (unless (and (eq evil-state 'insert)
                 (bound-and-true-p skk-mode))
      (apply fn args))))
#+end_src
** skk-server
#+begin_src emacs-lisp
(e:deferred-config! skk-server
  :after (skk)
  :defun (e:prodigy-yaskkserv2 . prodigy)
  :defvar (skk-server-prog yaskkserv2-dictionary)
  :preface
  (setopt skk-server-prog (executable-find "yaskkserv2"))
  (setopt yaskkserv2-dictionary (f-expand "~/sync/share/dictionary.yaskkserv2"))
  :if (and (bound-and-true-p skk-server-prog)
           (f-exists? yaskkserv2-dictionary))
  :config
  (setopt skk-large-jisyo nil)
  (setopt skk-server-inhibit-startup-server t)
  (setopt skk-server-host "127.0.0.1")
  (setopt skk-server-portnum 1178)
  (defun e:prodigy-yaskkserv2 ()
    (interactive)
    (let ((service "yaskkserv2"))
      (require 'prodigy)
      (unless (prodigy-find-service service)
        (prodigy-define-service
          :name service
          :command skk-server-prog
          :args `("--no-daemonize" "--google-suggest" ,yaskkserv2-dictionary)
          :tags '(general)
          :stop-signal 'int))
      (prodigy-start-service (prodigy-find-service service))))
  (e:prodigy-yaskkserv2))
#+end_src
** ddskk-posframe
#+begin_src emacs-lisp
(e:deferred-config! ddskk-posframe
  :after (skk)
  :config
  (ddskk-posframe-mode 1))
#+end_src
* Config: UI & Completions
** cape
*** codeium
#+begin_src emacs-lisp
(e:deferred-config! codeium
  :commands (cape-codeium)
  :defer-config
  (defalias 'cape-codeium (cape-capf-interactive #'codeium-completion-at-point)))
#+end_src
*** company-org-block
#+begin_src emacs-lisp
(e:deferred-config! company-org-block
  :commands (cape-org-block)
  :defer-config
  (setopt company-org-block-edit-style 'inline)
  (defalias 'cape-org-block (cape-capf-interactive (cape-company-to-capf #'company-org-block))))
#+end_src
*** cape
#+begin_src emacs-lisp
(e:deferred-config! cape
  :defun (e:capf-function)
  :hook ((prog-mode-hook . e:setup-capf/default)
         (org-mode-hook . e:setup-capf/org)
         (lsp-completion-mode-hook . e:setup-capf/lsp))
  :defer-config
  (defun e:capf-function (name &rest capfs)
    (let ((fun (intern (format "e:cape-%s" name)))
          (capfs (-concat capfs '(cape-dabbrev codeium-completion-at-point))))
      (defalias fun
        (cape-capf-interactive
         (cape-capf-buster
          (apply #'cape-capf-super capfs))))
      (list #'cape-file fun)))
  (defun e:setup-capf/default ()
    (interactive)
    (e:local! completion-at-point-functions
              (e:capf-function major-mode (car completion-at-point-functions))))
  (defun e:setup-capf/org ()
    (interactive)
    (e:local! completion-at-point-functions
              (e:capf-function "org" #'cape-elisp-block #'cape-org-block)))
  (defun e:setup-capf/lsp ()
    (interactive)
    (e:local! completion-at-point-functions
              (e:capf-function "lsp" #'lsp-completion-at-point))))
#+end_src
** consult
#+begin_src emacs-lisp
(e:deferred-config! consult
  :advice (:around consult-line ad:consult-line@with-orderless)
  :defer-config
  (setopt consult-line-start-from-top t))
#+end_src
** copilot
#+begin_src emacs-lisp
(e:deferred-config! copilot
  :advice ((:before-until corfu-complete ad:copilot-accept-completion-func)
           (:before-until indent-for-tab-command ad:copilot-accept-completion-func)
           (:before cape-codeium ad:copilot-cancel)
           (:before corfu-quick-complete ad:copilot-cancel))
  :defun (copilot-accept-completion
          copilot-clear-overlay)
  :hook ((prog-mode-hook . copilot-mode)
         (org-mode-hook . copilot-mode))
  :init
  (e:var! copilot-install-dir "copilot")
  :defer-config
  (setopt copilot-indent-offset-warning-disable t)
  (general-def copilot-mode-map
   "<backtab>" 'copilot-complete
   "C-z" 'copilot-complete)
  (general-def copilot-completion-map
   "<escape>" 'copilot-clear-overlay
   "C-n" 'copilot-next-completion
   "C-p" 'copilot-previous-completion
   "C-z" 'copilot-complete)
  ;; (add-to-list 'copilot-enable-predicates 'ignore)
  (defun ad:copilot-accept-completion-func (&rest _)
    (copilot-accept-completion))
  (defun ad:copilot-cancel (&rest _)
    (copilot-clear-overlay)))
#+end_src
** corfu
#+begin_src emacs-lisp
(e:deferred-config! corfu
  :defvar (corfu-map)
  :hook ((corfu-mode-hook . corfu-echo-mode)
         (corfu-mode-hook . corfu-popupinfo-mode)
         (minibuffer-setpu-hook . corfu-enable-always-in-minibuffer))
  :init
  (setopt corfu-auto t)
  (setopt corfu-auto-prefix 1)
  (setopt corfu-cycle t)
  (general-def corfu-map
    "<escape>" 'corfu-quit
    "C-q" 'corfu-quick-complete
    "C-z" 'cape-codeium)
  ;; https://github.com/minad/corfu?tab=readme-ov-file#completing-in-the-minibuffer
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (global-corfu-mode 1))
#+end_src
** embark
#+begin_src emacs-lisp
(e:deferred-config! embark
  :config
  (general-def minibuffer-mode-map
    :prefix "C-c"
    "C-a" 'embark-act
    "C-c" 'embark-collect
    "C-d" 'embark-dwim
    "C-e" 'embark-export))
#+end_src
** fussy
#+begin_src emacs-lisp
(e:deferred-config! fussy
  :init
  (setq completion-styles '(fussy orderless))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides nil)
  :defer-config
  (setopt fussy-filter-fn 'fussy-filter-orderless)
  (setopt fussy-score-fn 'fussy-fzf-native-score)
  (setopt fussy-max-candidate-limit 5000))
#+end_src
** fzf-native
#+begin_src emacs-lisp
(e:deferred-config! fzf-native
  :config
  (fzf-native-load-dyn))
#+end_src
** kind-icon
#+begin_src emacs-lisp
(e:deferred-config! kind-icon
  :after (corfu)
  :defvar (corfu-margin-formatters)
  :config
  (setopt kind-icon-default-face 'corfu-default)
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** marginalia
#+begin_src emacs-lisp
(e:deferred-config! marginalia
  :config
  (marginalia-mode 1))
#+end_src
** orderless
#+begin_src emacs-lisp
(e:deferred-config! orderless
  :commands (orderless-migemo)
  :defvar (orderless-matching-styles)
  :init
  ;; setopt は警告が出るので setq を使用
  (setq orderless-matching-styles '(orderless-literal orderless-regexp orderless-migemo))
  :defer-config
  (defun orderless-migemo (component)
    (when (fboundp 'migemo-get-pattern)
      (let ((pattern (migemo-get-pattern component)))
        (condition-case nil
            (progn (string-match-p pattern "") pattern)
          (invalid-regexp nil))))))
#+end_src
** origami
#+begin_src emacs-lisp
(e:deferred-config! origami
  :hook (prog-mode-hook . origami-mode))
#+end_src
** vertico
#+begin_src emacs-lisp
(e:deferred-config! vertico
  :priority :high
  :config
  (setopt vertico-count 20)
  (setopt vertico-cycle t)
  (general-def vertico-map
    "C-l" 'vertico-directory-up
    "M-N" 'vertico-repeat-next
    "M-P" 'vertico-repeat-previous)
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  (vertico-mode 1))
#+end_src
* Config: Org
** evil-org
#+begin_src emacs-lisp
(e:deferred-config! evil-org
  :hook (org-mode-hook . evil-org-mode))
#+end_src
** org-support
#+begin_src emacs-lisp
(e:deferred-config! org-support
  :defun (org-support/archive-file org-support/note-file org-support/tasks-file)
  :defvar (org-directory)
  :config
  (defun org-support/archive-file ()
    (require 'org)
    (f-expand (format-time-string "archives/%Y.org") org-directory))
  (defun org-support/tasks-file ()
    (require 'org)
    (f-expand "denote/20000101T000000--タスク__task.org" org-directory))
  (defun org-support/popup-tasks ()
    (interactive)
    (display-buffer (find-file-noselect (org-support/tasks-file))))
  (defun org-support/note-file ()
    (f-expand "denote/20000101T000001--メモ__memo.org" org-directory))
  (defun org-support/popup-note ()
    (interactive)
    (display-buffer (find-file-noselect (org-support/note-file)))))
#+end_src
** org
#+begin_src emacs-lisp
(e:deferred-config! org
  :defer-config
  (setopt org-directory (f-expand "~/org/"))
  (setopt org-default-notes-file (org-support/note-file))
  (setopt org-log-done 'time)
  (setopt org-startup-folded nil)
  (setopt org-startup-indented t)
  (setopt org-tags-column 0)
  (setopt org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
                              (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)")))
  (e:major-mode-key-def org-mode
    "," 'org-ctrl-c-ctrl-c))
#+end_src
** org-agenda
#+begin_src emacs-lisp
(e:deferred-config! org-agenda
  :after (org)
  :config
  (setopt org-agenda-current-time-string "← now")
  (setopt org-agenda-entry-text-leaders (s-concat (s-repeat 25 " ") "│ "))
  (setopt org-agenda-entry-text-maxlines 20)
  (setopt org-agenda-files (list (org-support/note-file)
                                 (org-support/tasks-file)
                                 (f-parent (org-support/archive-file))))
  (setopt org-agenda-span 28)
  (setopt org-agenda-time-grid '((daily today require-timed)
                                 (800 1000 1200 1400 1600 1800 2000)
                                 "      "
                                 "────────────────")))
#+end_src
** org-clock
#+begin_src emacs-lisp
(e:deferred-config! org-clock
  :after (org)
  :config
  (setopt org-clock-persist t)
  (org-clock-persistence-insinuate))
#+end_src
** org-faces
#+begin_src emacs-lisp
(e:deferred-config! org-faces
  :after (org)
  :config
  (setopt org-todo-keyword-faces
          '(("TODO"    . org-warning)
            ("WAITING" . org-done)
            ("HOLD"    . org-done)))
  (set-face-attribute 'org-todo nil :foreground "#00ff00")
  (set-face-attribute 'org-done nil :foreground "#696969")
  (set-face-attribute 'org-headline-done nil :foreground "#696969")
  (set-face-attribute 'org-headline-todo nil :foreground "#00ff00")
  (set-face-attribute 'org-level-1 nil :height 1.0)
  (set-face-attribute 'org-level-2 nil :height 1.0)
  (set-face-attribute 'org-level-3 nil :height 1.0))
#+end_src
** org-refile
#+begin_src emacs-lisp
(e:deferred-config! org-refile
  :after (org)
  :config
  (setopt org-refile-targets
          '((org-support/tasks-file   :level . 1)
            (org-support/archive-file :level . 1)))
  (setopt org-refine-use-outline-path 'file))
#+end_src
** org-src
#+begin_src emacs-lisp
(e:deferred-config! org-src
  :after (org)
  :config
  (setopt org-edit-src-content-indentation 0)
  (setopt org-src-window-setup 'split-window-below))
#+end_src
** org-superstar
#+begin_src emacs-lisp
(e:deferred-config! org-superstar
  :after (org)
  :hook (org-mode-hook . org-superstar-mode))
#+end_src
* Config: Packages
** ace-window
#+begin_src emacs-lisp
(e:deferred-config! ace-window
  :defer-config
  (setopt aw-keys (number-sequence ?1 ?9))
  (setopt aw-scope 'frame))
#+end_src
** affe
#+begin_src emacs-lisp
(e:deferred-config! affe
  :defvar (affe-find-command)
  :defer-config
  (setopt affe-find-command (or (executable-find "fd") affe-find-command))
  (setopt affe-regexp-function 'orderless-pattern-compiler)
  (setopt affe-highlight-function 'orderless--highlight))
#+end_src
** atomic-chrome
#+begin_src emacs-lisp
(e:deferred-config! atomic-chrome
  :config
  (atomic-chrome-start-server))
#+end_src
** apheleia
#+begin_src emacs-lisp
(e:deferred-config! apheleia
  :defvar (apheleia-formatters apheleia-mode-alist)
  :config
  (apheleia-global-mode 1)
  :defer-config
  (defun apheleia-inhibit-unnecesary-major-mode ()
    (--none? (derived-mode-p it)
             '(
               ruby-base-mode
               )))
  (defun apheleia-inhibit-rubocop-excludes ()
    (--any? (s-ends-with? it buffer-file-name)
            '(
              "/config/application.rb"
              "/config/environments/development.rb"
              "/config/environments/production.rb"
              "/config/environments/staging.rb"
              "/config/environments/test.rb"
              "/db/schema.rb"
              )))
  (setopt apheleia-inhibit-functions
          '(apheleia-inhibit-unnecesary-major-mode
            apheleia-inhibit-rubocop-excludes))
  ;; formatters
  (setf (alist-get 'rubocop apheleia-formatters)
        '((if (e:bundle-exists "rubocop")
              '("bundle" "exec" "rubocop")
            "rubocop")
          file "--autocorrect" "--stderr" "--format" "quiet" "--fail-level" "fatal"))
  ;; mode-alist
  (setf (alist-get 'ruby-ts-mode apheleia-mode-alist) '(rubocop)))
#+end_src
** avy
#+begin_src emacs-lisp
(e:deferred-config! avy
  :config
  (with-eval-after-load 'evil
    (general-def '(normal motion)
      "S" 'evil-avy-goto-word-0
      "gj" 'evil-avy-goto-line-below
      "gk" 'evil-avy-goto-line-above))
  :defer-config
  (setopt avy-keys (number-sequence ?a ?z))
  (setopt avy-all-windows t)
  (setopt avy-all-windows-alt nil))
#+end_src
** chezmoi
#+begin_src emacs-lisp
(e:deferred-config! chezmoi
  :defun (chezmoi-find chezmoi-target-file)
  :defvar (chezmoi-mode)
  :config
  (require 'chezmoi)
  (add-hook 'find-file-hook
            (defun reopen-in-chezmoi-mode ()
              (let* ((source (buffer-file-name))
                     (target (chezmoi-target-file (or source ""))))
                (when (and target
                           (not chezmoi-mode))
                  (chezmoi-find target))))))
#+end_src
** denote
*** denote
#+begin_src emacs-lisp
(e:deferred-config! denote
  :defer-config
  (eval-and-compile (require 'org))
  (setopt denote-directory (expand-file-name "denote" org-directory))
  (setopt denote-known-keywords '("memo" "task")))
#+end_src
*** denote-menu
#+begin_src emacs-lisp
(e:deferred-config! denote-menu)
#+end_src
** devdocs
#+begin_src emacs-lisp
(e:deferred-config! devdocs
  :config
  (add-hook 'ruby-base-mode-hook
            (defun e:devdocs-ruby ()
              (setq-local devdocs-current-docs '("rails~7.1" "ruby~3")))))
#+end_src
** difftastic
#+begin_src emacs-lisp
(e:deferred-config! difftastic
  :config
  (with-eval-after-load 'magit-diff
    (transient-append-suffix 'magit-diff '(-1 -1)
      [("D" "Difftastic diff (dwim)" difftastic-magit-diff)
       ("S" "Difftastic show" difftastic-magit-show)])))
#+end_src
** doom-modeline
#+begin_src emacs-lisp
(e:deferred-config! doom-modeline
  :config
  (setopt doom-modeline-buffer-file-name-style 'relative-from-project)
  (setopt doom-modeline-minor-modes t)
  (doom-modeline-mode 1))
#+end_src
** dtrt-indent
#+begin_src emacs-lisp
(e:deferred-config! dtrt-indent
  :defun (dtrt-indent-adapt)
  :hook (prog-mode-hook . setup-dtrt-indent)
  :defer-config
  (defun setup-dtrt-indent ()
    (dtrt-indent-mode 1)
    (dtrt-indent-adapt)))
#+end_src
** dumb-jump
#+begin_src emacs-lisp
(e:deferred-config! dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
** editorconfig
#+begin_src emacs-lisp
(e:deferred-config! editorconfig
  :config
  (editorconfig-mode 1))
#+end_src
** elisp-demos
#+begin_src emacs-lisp
(e:deferred-config! elisp-demos
  :advice ((:after describe-function-1 elisp-demos-advice-describe-function-1)
           (:after helpful-update      elisp-demos-advice-helpful-update)))
#+end_src
** flycheck
#+begin_src emacs-lisp
(e:deferred-config! flycheck
  :commands (e:flycheck-copy-error-ids)
  :defun (flycheck-add-next-checker
          flycheck-checker-get
          flycheck-def-config-file-var
          flycheck-error-id
          flycheck-may-enable-checker
          flycheck-overlay-errors-at
          flycheck-select-checker)
  :init
  (global-flycheck-mode 1)
  (defun e:flycheck-copy-error-ids ()
    (interactive)
    (let ((messages (->> (flycheck-overlay-errors-at (point))
                         (-map #'flycheck-error-id)
                         (-uniq)
                         (-non-nil))))
      (when messages
        (kill-new (string-join messages ", "))
        (message (string-join messages ", ")))))
  :config
  (setopt flycheck-check-syntax-automatically '(save idle-change mode-enabled))
  (setopt flycheck-idle-change-delay 5.0)
  :defer-config
  (e:eval!
    (flycheck-def-config-file-var flycheck-haml-lintrc haml-lint ".haml-lint.yml" :safe #'stringp)
    (setf (flycheck-checker-get 'haml-lint 'command)
          '("haml-lint" "--no-color" "--no-summary"
            (config-file "--config" flycheck-haml-lintrc)
            source-inplace))))
#+end_src
** git-gutter
#+begin_src emacs-lisp
(e:deferred-config! git-gutter
  :config
  (global-git-gutter-mode 1))
#+end_src
** helm
#+begin_src emacs-lisp
(e:deferred-config! helm
  :bind (([remap eval-expression] . helm-eval-expression-with-eldoc)))
#+end_src
** highlight-indentation
#+begin_src emacs-lisp
(e:deferred-config! highlight-indentation
  :commands (highlight-indentation-mode-on)
  :config
  (setopt highlight-indentation-offset 2)
  :defer-config
  (set-face-attribute 'highlight-indentation-face nil :background "#202020" :inherit nil)
  (e:define-minor-mode-switch highlight-indentation-mode))
#+end_src
** hl-todo
#+begin_src emacs-lisp
(e:deferred-config! hl-todo
  :config
  (global-hl-todo-mode 1))
#+end_src
** jinx
#+begin_src emacs-lisp
(e:deferred-config! jinx
  :defvar (jinx-exclude-regexps jinx-include-faces)
  :hook (prog-mode-hook . jinx-mode)
  :config
  (setopt jinx-languages "en_US")
  (setf (alist-get 'prog-mode jinx-include-faces)
        '(font-lock-comment-face
          font-lock-constant-face
          font-lock-doc-face
          font-lock-function-name-face
          font-lock-string-face
          font-lock-type-face))
  ;; https://github.com/minad/jinx/issues/4#issuecomment-1484786256
  (let ((re (alist-get t jinx-exclude-regexps)))
    (add-to-list 're "\\cc")
    (setf (alist-get t jinx-exclude-regexps) re)))
#+end_src
** locale-eaw
#+begin_src emacs-lisp
(e:deferred-config! eaw
  :commands (eaw-fullwidth)
  :init
  (eaw-fullwidth))
#+end_src
** macrostep
#+begin_src emacs-lisp
(e:deferred-config! macrostep
  :config
  (e:major-mode-key-def (emacs-lisp-mode lisp-interaction-mode)
    "d" "debug"
    "dm" 'macrostep-mode)
  (hercules-def
   :toggle-funs #'macrostep-mode
   :keymap 'macrostep-keymap))
#+end_src
** magit
*** magit
#+begin_src emacs-lisp
(e:deferred-config! magit
  :advice (:override magit-repos-alist magit-repos-alist@override)
  :defun (magit-add-section-hook magit-list-repos magit-list-repos-uniquify)
  :defer-config
  (setopt magit-delete-by-moving-to-trash nil)
  (setopt magit-diff-refine-hunk 'all)
  (setopt magit-diff-refine-ignore-whitespace t)
  (setopt magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (setopt magit-log-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width t 15))
  (--each '(magit-insert-skip-worktree-files magit-insert-modules-overview)
    (magit-add-section-hook 'magit-status-sections-hook it 'magit-insert-unpulled-from-upstream t))
  (let ((argments '("--graph" "-n256" "--decorate" "--date-order" "--show-signature")))
    (put 'magit-log-mode 'magit-log-default-arguments argments)
    (put 'magit-log-select-mode 'magit-log-default-arguments argments))
  ;; リポジトリの一覧表示にパスをつける
  (defun magit-repos-alist@override (&rest _)
    (magit-list-repos-uniquify
     (--map (cons (f-short it) it)
            (magit-list-repos))))
  ;; `ghq' で管理しているディレクトリを探索の対象にする
  (when (executable-find "ghq")
    (setopt magit-repository-directories
            (->> (kllib:shell-command-to-list "ghq root --all")
                 (--map (cons it 5))))))
#+end_src
*** magit-delta
#+begin_src emacs-lisp
(e:deferred-config! magit-delta
  :advice (:around magit-delta-call-delta-and-convert-ansi-escape-sequences magit-delta-call-delta-and-convert-ansi-escape-sequences@auto-disable)
  :defvar (magit-delta-mode)
  :hook (magit-mode-hook . magit-delta-mode)
  :defer-config
  ;; https://github.com/dandavison/magit-delta/issues/9#issuecomment-795435781
  (defvar nth/magit-delta-point-max 50000)
  (defun magit-delta-call-delta-and-convert-ansi-escape-sequences@auto-disable (fn &rest args)
    (if (<= (point-max) nth/magit-delta-point-max)
        (apply fn args)
      (magit-delta-mode -1)))
  (add-hook 'magit-post-refresh-hook
            (defun nth/magit-delta-auto-enable (&rest _)
              (when (and (not magit-delta-mode)
                         (<= (point-max) nth/magit-delta-point-max))
                (magit-delta-mode +1)))))
#+end_src
** migemo
#+begin_src emacs-lisp
(e:deferred-config! migemo
  :config
  (require 'migemo)
  (setopt migemo-user-dictionary nil)
  (setopt migemo-regex-dictionary nil)
  (e:if! (eq system-type 'darwin)
    (setopt migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict"))
  (e:if! (eq system-type 'gnu/linux)
    (setopt migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")))
#+end_src
** minions
#+begin_src emacs-lisp
(e:deferred-config! minions
  :config
  (minions-mode 1))
#+end_src
** open-junk-file
#+begin_src emacs-lisp
(e:deferred-config! open-junk-file
  :config
  (setopt open-junk-file-format (f-expand "junk/%Y/%Y%m%d%H%M%S." no-littering-var-directory)))
#+end_src
** prodigy
*** prodigy
#+begin_src emacs-lisp
(e:deferred-config! prodigy
  :defun (prodigy-find-service prodigy-start-service)
  :defer-config
  (setopt prodigy-view-buffer-maximum-size 2048)
  (setopt prodigy-view-truncate-by-default t)
  (prodigy-define-tag
    :name 'rails
    :ready-message "Use Ctrl-C to stop"))
#+end_src
*** prodigy-with-vterm
#+begin_src emacs-lisp
(e:deferred-config! prodigy-with-vterm
  :advice (:around prodigy-start-service ad:prodigy-start-service@with-vterm)
  :after (prodigy)
  :defvar (vterm--process)
  :defun (ad:start-process@with-vterm vterm--internal)
  :config
  (defun ad:start-process@with-vterm (name buffer program &rest args)
    (let* ((cwd (plist-get (prodigy-find-service name) :cwd))
           (sock-file (f-expand ".overmind.sock" cwd)))
      (when (f-exists? sock-file)
        (message "delete: %s" sock-file)
        (delete-file sock-file)))
    (save-window-excursion
      (with-current-buffer
          (apply #'e:vterm-exec name program args)
        vterm--process)))
  (defun ad:prodigy-start-service@with-vterm (func &rest args)
    (when (require 'vterm nil t)
      (advice-add 'start-process :override #'ad:start-process@with-vterm))
    (prog1 (ignore-errors (apply func args))
      (advice-remove 'start-process #'ad:start-process@with-vterm))))
#+end_src
** projectile
#+begin_src emacs-lisp
(e:deferred-config! projectile
  :commands (e:setup-projectile-known-projects)
  :defun (projectile-project-vcs)
  :defvar (projectile-known-projects)
  :defer-config
  (defun e:setup-projectile-known-projects ()
    (when (executable-find "ghq")
        (setq projectile-known-projects
            (->> projectile-known-projects
                (--remove (eq (projectile-project-vcs it) 'none))
                (-union (-map 'f-short (kllib:shell-command-to-list "ghq list --full-path")))
                (-map 'file-name-as-directory)
                (-sort 's-less?)
                (-distinct)))))
  (e:setup-projectile-known-projects))
#+end_src
** scratch
*** scratch
#+begin_src emacs-lisp
(e:deferred-config! scratch
  :config
  (setopt persistent-scratch-scratch-buffer-p-function
          (defun scratch-buffer-p ()
            (or (eq (current-buffer) (get-scratch-buffer-create))
                (bound-and-true-p scratch-buffer))))
  (save-window-excursion
    (scratch-buffer)
    (funcall initial-major-mode)
    (display-line-numbers-mode-on)))
#+end_src
*** persistent-scratch
#+begin_src emacs-lisp
(e:deferred-config! persistent-scratch
  :priority :high
  :config
  (persistent-scratch-setup-default))
#+end_src
** separedit
#+begin_src emacs-lisp
(e:deferred-config! separedit
  :config
  (general-def prog-mode-map
    "C-c '" 'separedit)
  :defer-config
  (setopt separedit-preserve-string-indentation t))
#+end_src
** shackle
#+begin_src emacs-lisp
(e:deferred-config! shackle
  :advice ((:after shackle-display-buffer-action ad:shackle-display-buffer-action@save-windows)
           (:before keyboard-quit ad:keyboard-quit@shackle-auto-close))
  :defvar (shackle-last-window)
  :config
  (setopt shackle-rules
          '(;;
            ("*Backtrace*"        :align bottom :ratio 0.3 :select t)
            ("*Flycheck errors*"  :align bottom :ratio 0.3 :select t)
            ("*Google Translate*" :align bottom :ratio 0.3 :select t)
            ("*Help*"             :align bottom :ratio 0.3 :select t)
            ;;
            ("*Async Shell Command*"          :align bottom :ratio 0.3)
            ("*Bundler*"                      :align bottom :ratio 0.3)
            ("*General Keybindings*"          :align bottom :ratio 0.3)
            ("*Make*"                         :align bottom :ratio 0.3)
            ("*Warnings*"                     :align bottom :ratio 0.3)
            ("*projectile-rails-compilation*" :align bottom :ratio 0.3)
            ("*rspec-compilation*"            :align bottom :ratio 0.3)
            ("*trace-output*"                 :align bottom :ratio 0.3)
            ))
  (shackle-mode 1)
  :defer-config
  (defvar e:shackle-auto-close-windows nil)
  (defun ad:shackle-display-buffer-action@save-windows (&rest _)
    (setq e:shackle-auto-close-windows (-filter #'window-live-p e:shackle-auto-close-windows))
    (add-to-list 'e:shackle-auto-close-windows shackle-last-window))
  (defun ad:keyboard-quit@shackle-auto-close (&rest _)
    (ignore-errors
      (-each e:shackle-auto-close-windows 'delete-window))
    (setq e:shackle-auto-close-windows nil)))
#+end_src
** shell-pop
#+begin_src emacs-lisp
(e:deferred-config! shell-pop
  :advice (:around shell-pop ad:shell-pop@auto-session-name)
  :defvar (shell-pop-shell-type)
  :config
  (setopt shell-pop-shell-type '("vterm" "*vterm-default*" (lambda () (vterm))))
  :defer-config
  (setopt shell-pop-autocd-to-working-dir nil)
  (setopt shell-pop-full-span t)
  (setopt shell-pop-window-size 50)
  (defun ad:shell-pop@auto-session-name (func &rest args)
    (let* ((tab (tab-bar--current-tab))
           (identifier (if (alist-get 'explicit-name tab)
                           (alist-get 'name tab)
                         "default"))
           (shell-pop-internal-mode-buffer (format "*vterm-%s*" identifier))
           (vterm-shell (format "tmux new -A -s emacs-%s" identifier)))
      (apply func args))))
#+end_src
** smartparens
#+begin_src emacs-lisp
(e:deferred-config! smartparens
  :defun (sp-local-pair)
  :config
  (setopt sp-cancel-autoskip-on-backward-movement nil)
  (setopt sp-highlight-pair-overlay nil)
  (setopt sp-highlight-wrap-overlay nil)
  (setopt sp-highlight-wrap-tag-overlay nil)
  (setopt sp-show-pair-from-inside t)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
  (sp-local-pair 'lisp-interaction-mode "'" nil :actions nil)
  (require 'smartparens-config))
#+end_src
** symbol-overlay
#+begin_src emacs-lisp
(e:deferred-config! symbol-overlay
  :defvar (symbol-overlay-map)
  :defer-config
  (setq symbol-overlay-map (make-sparse-keymap)))
#+end_src
** transient
#+begin_src emacs-lisp
(e:deferred-config! transient
  :defer-config
  (setopt transient-default-level 7)
  (e:var! transient-values-file "transient-values.el"))
#+end_src
** undo-fu
#+begin_src emacs-lisp
(e:deferred-config! undo-fu
  :config
  (setopt evil-undo-system 'undo-fu))
#+end_src
** visual-regexp
#+begin_src emacs-lisp
(e:deferred-config! visual-regexp
  :bind ([remap query-replace] . vr/query-replace))
#+end_src
** vterm
#+begin_src emacs-lisp
(e:deferred-config! vterm
  :commands (e:vterm-exec)
  :defer-config
  (general-def vterm-mode-map
    "<wheel-down>" 'ignore
    "<wheel-up>" 'ignore
    "C-c C-g" 'keyboard-quit
    "C-g" 'vterm--self-insert)
  (general-def 'insert vterm-mode-map
    "<escape>" 'vterm-send-escape
    "C-z" 'vterm--self-insert)
  (setopt vterm-max-scrollback 20000)
  (setopt vterm-shell "tmux new -A -s emacs-default")
  (defun e:vterm-exec (name program &rest args)
    (let ((vterm-buffer-name (format "*vterm %s*" name))
          (vterm-shell (format "zsh -c '%s'" (s-join " " (cons program args)))))
      (vterm))))
#+end_src
** wakatime-mode
#+begin_src emacs-lisp
(e:deferred-config! wakatime-mode
  :defvar (wakatime-api-key wakatime-cli-path)
  :preface
  (setopt wakatime-cli-path (executable-find "wakatime-cli"))
  :if (and wakatime-cli-path
           (bound-and-true-p wakatime-api-key))
  :config
  (global-wakatime-mode 1))
#+end_src
** which-key
#+begin_src emacs-lisp
(e:deferred-config! which-key
  :config
  (setopt which-key-idle-delay 0.4)
  (setopt which-key-idle-secondary-delay 0.01)
  (setopt which-key-min-display-lines 6)
  (setopt which-key-show-early-on-C-h t)
  (setopt which-key-sort-order 'which-key-key-order-alpha)
  (which-key-mode 1))
#+end_src
** winum
#+begin_src emacs-lisp
(e:deferred-config! winum
  :config
  (winum-mode 1))
#+end_src
* Config: Languages
** Tools
*** lsp-mode
#+begin_src emacs-lisp
(e:deferred-config! lsp-mode
  :defun (lsp-deferred)
  :defer-config
  (setopt lsp-auto-execute-action nil)
  (setopt lsp-completion-provider :none)
  (setopt lsp-enable-file-watchers nil)
  (setopt lsp-enable-snippet nil)
  (setopt lsp-file-watch-threshold 100000)
  (setopt lsp-imenu-sort-methods '(position))
  (setopt lsp-modeline-code-actions-enable nil)
  (setopt lsp-restart 'ignore)
  (e:minor-mode-key-def lsp-mode
    "=" "format"
    "=b" 'lsp-format-buffer
    "=o" 'lsp-organize-imports
    "=r" 'lsp-format-region
    "a" "code action"
    "aa" 'lsp-execute-code-action
    "b" "backend"
    "bd" 'lsp-describe-session
    "br" 'lsp-workspace-restart
    "bs" 'lsp-workspace-shutdown
    "bv" 'lsp-version
    "r" "refactor"
    "rr" 'lsp-rename))
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
(e:deferred-config! lsp-ui
  :defer-config
  (setopt lsp-ui-doc-delay 2.0)
  (setopt lsp-ui-doc-include-signature t)
  (setopt lsp-ui-doc-position 'at-point)
  (setopt lsp-ui-doc-show-with-cursor t)
  (setopt lsp-ui-sideline-enable nil))
#+end_src
*** lsp-rubocop
#+begin_src emacs-lisp
(e:deferred-config! lsp-rubocop
  :defun (e:bundle-exists)
  :advice (:before lsp-rubocop--build-command ad:lsp-rubocop--build-command@auto-detect)
  :defer-config
  (e:eval!
    (let ((rubocop-ls (gethash 'rubocop-ls lsp-clients)))
      (setf (lsp--client-add-on? rubocop-ls) t)))
  (defun ad:lsp-rubocop--build-command@auto-detect ()
    (setq-local lsp-rubocop-use-bundler (e:bundle-exists "rubocop"))))
#+end_src
*** lsp-solargraph
#+begin_src emacs-lisp
(e:deferred-config! lsp-solargraph
  :defun (e:bundle-exists)
  :advice (:before lsp-solargraph--build-command ad:lsp-solargraph--build-command@auto-detect)
  :defer-config
  (setopt lsp-solargraph-library-directories '("~/.asdf/installs/ruby"))
  (defun ad:lsp-solargraph--build-command@auto-detect ()
    (setq-local lsp-solargraph-use-bundler (e:bundle-exists "solargraph"))))
#+end_src
*** lsp-volar
#+begin_src emacs-lisp
(e:deferred-config! lsp-volar
  :defer-config
  (setopt lsp-volar-take-over-mode nil))
#+end_src
*** dap-mode
#+begin_src emacs-lisp
(e:deferred-config! dap-mode)
#+end_src
*** tree-sitter
#+begin_src emacs-lisp
(e:deferred-config! treesit-auto
  :commands (treesit-auto-add-to-auto-mode-alist global-treesit-auto-mode)
  :init
  (setopt treesit-auto-install t)
  (setopt treesit-language-source-alist
               '((vue "https://github.com/ikatyang/tree-sitter-vue")))
  (treesit-auto-add-to-auto-mode-alist)
  (global-treesit-auto-mode 1)
  :defer-config
  (setopt treesit-auto-langs (delete 'vue treesit-auto-langs)))
#+end_src
** Ruby
*** ruby-ts-mode
#+begin_src emacs-lisp
(e:deferred-config! ruby-ts-mode
  :hook (ruby-ts-mode-hook . lsp-deferred)
  :mode "\\.csb\\'"
  :defer-config
  (e:major-mode-key-def ruby-ts-mode
    "b" "bundle"
    "bc" 'bundle-check
    "bi" 'bundle-install
    "bo" 'bundle-open
    "bu" 'bundle-update
    "bx" 'bundle-exec
    "r" "refactor"
    "r\"" 'ruby-toggle-string-quotes
    "r'" 'ruby-toggle-string-quotes
    "r{" 'ruby-toggle-block
    "r}" 'ruby-toggle-block)
  (grugru-define-multiple
    (ruby-ts-mode
     (symbol "have_button" "have_no_button")
     (symbol "have_content" "have_no_content")
     (symbol "have_link" "have_no_link")
     (symbol "if" "unless")
     (symbol "let" "let!")
     (symbol "to" "not_to")
     (symbol "true" "false")))
  (defvar e:bundle-exists-cache (ht-create 'equal))
  (defun e:clear-bundle-exists-cache ()
    (interactive)
    (ht-clear! e:bundle-exists-cache))
  (defun e:bundle-exists (name)
    (let ((key (format "%s@%s" name (or (kllib:project-root) (buffer-name)))))
      (unless (ht-get e:bundle-exists-cache key)
        (ht-set e:bundle-exists-cache key (call-process-shell-command (format "bundle info %s" name))))
      (zerop (ht-get e:bundle-exists-cache key)))))
#+end_src
*** haml-mode
#+begin_src emacs-lisp
(e:deferred-config! haml-mode
  :hook (haml-mode-hook . highlight-indentation-mode-on)
  :config
  (add-hook 'haml-mode-hook
            (defun e:haml-mode-setup ()
              (when (flycheck-may-enable-checker 'haml-lint)
                (flycheck-select-checker 'haml-lint)
                (setq-local flycheck-command-wrapper-function
                            (lambda (command)
                              (append '("bundle" "exec") command))))))
  :defer-config
  (flycheck-add-next-checker 'haml 'haml-lint))
#+end_src
*** bundler
#+begin_src emacs-lisp
(e:deferred-config! bundler)
#+end_src
*** projectile-rails
#+begin_src emacs-lisp
(e:deferred-config! projectile-rails
  :defvar (projectile-rails-views-re)
  :init
  (projectile-rails-global-mode 1)
  :config
  (let ((exts '("html" "erb" "haml" "slim"
                "js" "coffee" "ts"
                "css" "scss" "sass" "less"
                "json" "builder" "jbuilder" "rabl"
                "csb" "axlsx")))
    (setopt projectile-rails-views-re (concat "\\." (regexp-opt exts))))
  (e:var! rake-cache-file "rake.cache")
  (setopt rake-completion-system 'completing-read-default)
  (e:minor-mode-key-def projectile-rails-mode
    "f" "rails"
    "f:" '("rake" . projectile-rails-rake)
    "fc" "generate/destroy"
    "fcc" '("generate" . projectile-rails-generate)
    "fcd" '("destroy" . projectile-rails-destroy)
    "ff" "find"
    "ff@" '("mailer" . projectile-rails-find-mailer)
    "ffV" '("view component" . projectile-rails-find-view-components)
    "ffa" '("locale" . projectile-rails-find-locale)
    "ffb" '("job" . projectile-rails-find-job)
    "ffc" '("controller" . projectile-rails-find-controller)
    "ffe" '("environment" . projectile-rails-find-environment)
    "fff" '("feature" . projectile-rails-find-feature)
    "ffg" '("graphql" . projectile-rails-find-graphql)
    "ffh" '("helper" . projectile-rails-find-helper)
    "ffi" '("initializer" . projectile-rails-find-initializer)
    "ffj" '("javascript" . projectile-rails-find-javascript)
    "ffl" '("lib" . projectile-rails-find-lib)
    "ffm" '("model" . projectile-rails-find-model)
    "ffn" '("migration" . projectile-rails-find-migration)
    "ffo" '("log" . projectile-rails-find-log)
    "ffp" '("spec" . projectile-rails-find-spec)
    "ffr" '("rake task" . projectile-rails-find-rake-task)
    "ffs" '("stylesheet" . projectile-rails-find-stylesheet)
    "fft" '("test" . projectile-rails-find-test)
    "ffu" '("fixture" . projectile-rails-find-fixture)
    "ffv" '("view" . projectile-rails-find-view)
    "ffw" '("webpack" . projectile-rails-find-webpack)
    "ffy" '("layout" . projectile-rails-find-layout)
    "fg" "goto"
    "fg." '("point" . projectile-rails-goto-file-at-point)
    "fgc" '("controller" . projectile-rails-find-current-controller)
    "fgd" '("schema" . projectile-rails-goto-schema)
    "fge" '("seeds" . projectile-rails-goto-seeds)
    "fgg" '("gemfile" . projectile-rails-goto-gemfile)
    "fgh" '("helper" . projectile-rails-find-current-helper)
    "fgj" '("javascript" . projectile-rails-find-current-javascript)
    "fgm" '("model" . projectile-rails-find-current-model)
    "fgn" '("migration" . projectile-rails-find-current-migration)
    "fgp" '("spec" . projectile-rails-find-current-spec)
    "fgr" '("routes" . projectile-rails-goto-routes)
    "fgs" '("stylesheet" . projectile-rails-find-current-stylesheet)
    "fgt" '("test" . projectile-rails-find-current-test)
    "fgu" '("fixture" . projectile-rails-find-current-fixture)
    "fgv" '("view" . projectile-rails-find-current-view)
    "fgz" '("helper" . projectile-rails-goto-spec-helper))
  :defer-config
  (defun e:projectile-rails-find-resource (prompt dirs &optional newfile-template)
    (eval '(projectile-rails-find-resource prompt dirs newfile-template)))
  (defun projectile-rails-find-view-components ()
    "Find a View component."
    (interactive)
    (e:projectile-rails-find-resource
      "components: "
      `(("app/components/" "\\(.+\\)\\.rb$")
        ("app/components/" ,(concat "\\(.+\\)" projectile-rails-views-re)))
      "app/components/${filename}"))
  (defun projectile-rails-find-graphql ()
    "Find a GraphQL."
    (interactive)
    (e:projectile-rails-find-resource
     "graphql: "
     '(("app/graphql/" "\\(.+\\)\\.rb$"))
     "app/graphql/${filename}")))
#+end_src
*** rails-routes
#+begin_src emacs-lisp
(e:deferred-config! rails-routes
  :defer-config
  (e:var! rails-routes-cache-path "rails-routes"))
#+end_src
*** rspec-mode
#+begin_src emacs-lisp
(e:deferred-config! rspec-mode
  :defer-config
  (e:minor-mode-key-def rspec-mode
    "t" "test"
    "t TAB" 'rspec-toggle-spec-and-target
    "ta" 'rspec-verify-all
    "tb" 'rspec-verify
    "tc" 'rspec-verify-continue
    "te" 'rspec-toggle-example-pendingness
    "tf" 'rspec-verify-method
    "tl" 'rspec-run-last-failed
    "tm" 'rspec-verify-matching
    "tr" 'rspec-rerun
    "tt" 'rspec-verify-single
    "t~" 'rspec-toggle-spec-and-target-find-example))
#+end_src
** TypeScript/JavaScript
*** typescript-ts-mode
#+begin_src emacs-lisp
(e:deferred-config! typescript-ts-mode
  :hook ((typescript-ts-mode-hook . lsp-deferred)
         (tsx-ts-mode-hook . lsp-deferred))
  :mode "\\.mts\\'")
#+end_src
*** vue-mode
#+begin_src emacs-lisp
(e:deferred-config! vue-mode
  :config
  (define-derived-mode vue-mode web-mode "Vue")
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
  (add-hook 'vue-mode-hook #'lsp-deferred))
#+end_src
*** vue-ts-mode
#+begin_src emacs-lisp :tangle no
(e:deferred-config! vue-ts-mode
  :hook (vue-ts-mode-hook . lsp-deferred)
  :mode "\\.vue\\'")
#+end_src
*** yarn
#+begin_src emacs-lisp
(e:deferred-config! yarn
  :commands (yarn-install
             yarn-self-udpate
             yarn-update
             yarn-upgrade))
#+end_src
** HTML/CSS
*** web-mode
#+begin_src emacs-lisp
(e:deferred-config! web-mode
  :mode "\\.erb\\'"
  :config
  (setopt web-mode-enable-auto-indentation nil))
#+end_src
*** sass-mode
#+begin_src emacs-lisp
(e:deferred-config! sass-mode
  :hook (sass-mode-hook . rainbow-mode))
#+end_src
*** scss-mode
#+begin_src emacs-lisp
(e:deferred-config! scss-mode
  :hook (scss-mode-hook . rainbow-mode))
#+end_src
*** emmet-mode
#+begin_src emacs-lisp
(e:deferred-config! emmet-mode
  :hook ((haml-mode-hook . emmet-mode)
         (tsx-ts-mode-hook . emmet-mode)
         (vue-ts-mode-hook . emmet-mode)
         (web-mode-hook . emmet-mode))
  :defer-config
  (general-def emmet-mode-keymap
    "<C-return>" nil
    "C-c C-j" 'emmet-expand-line
    "C-j" nil))
#+end_src
** Text
*** yaml-ts-mode
#+begin_src emacs-lisp
(e:deferred-config! yaml-mode
  :commands (yaml-indent-line))
(e:deferred-config! yaml-ts-mode
  :hook ((yaml-ts-mode-hook . lsp-deferred)
         (yaml-ts-mode-hook . highlight-indentation-mode-on))
  :defer-config
  (general-def yaml-ts-mode-map
    "TAB" 'yaml-indent-line))
#+end_src
* Config: Keybinds
** Space
*** スペースがプレフィックスとして使用できない場合の代替キー
#+begin_src emacs-lisp
(general-def '(motion normal visual)
  "M-m" (general-simulate-key "SPC"))
#+end_src
*** root
#+begin_src emacs-lisp
(e:key-def root nil
  "SPC" '(execute-extended-command :wk "M-x")
  "TAB" '(e:switch-to-last-buffer :wk "Last buffer")
  "!" 'shell-command
  "%" 'query-replace
  "&" 'async-shell-command
  "*" '(e:consult-ripgrep-dwim :wk "ripgrep(dwim)")
  "/" '(e:consult-ripgrep :wk "ripgrap")
  ";" 'evilnc-comment-operator
  "^" 'ace-window
  "|" 'shell-command-on-region
  "1" '(winum-select-window-1 :wk "window 1")
  "2" '(winum-select-window-2 :wk "window 2")
  "3" '(winum-select-window-3 :wk "window 3")
  "4" '(winum-select-window-4 :wk "window 4")
  "5" '(winum-select-window-5 :wk "window 5")
  "6" '(winum-select-window-6 :wk "window 6")
  "7" '(winum-select-window-7 :wk "window 7")
  "8" '(winum-select-window-8 :wk "window 8")
  "9" '(winum-select-window-9 :wk "window 9")
  "m" '(:ignore t :wk "mode")
  "u" 'universal-argument
  "v" 'er/expand-region)
#+end_src
*** [F] frame
#+begin_src emacs-lisp
(e:key-def frame F
  "" '(:ignore t :wk "frame")
  "D" 'delete-other-frames
  "d" 'delete-frame
  "n" 'make-frame
  "o" 'other-frame)
#+end_src
*** [a] application...
#+begin_src emacs-lisp
(e:key-def application a
  "" '(:ignore t :wk "application")
  "c" '(:ignore t :wk "chezmoi")
  "cd" 'chezmoi-diff
  "cf" 'chezmoi-find
  "co" 'chezmoi-open-other
  "cs" 'chezmoi-sync-files
  "ct" 'chezmoi-template-buffer-display
  "cw" 'chezmoi-write
  "p" '(:ignore t :wk "packages")
  "pa" 'borg-activate
  "pb" 'borg-build
  "pc" 'borg-clone
  "pd" 'borg-remove
  "pi" 'borg-assimilate
  "pl" 'epkg-list-packages
  "pv" 'epkg-describe-package
  "t" '(:ignore t :wk "tools")
  "tp" 'prodigy)
#+end_src
*** [b] buffer
#+begin_src emacs-lisp
(e:key-def buffer b
  "" '(:ignore t :wk "buffer")
  "S" 'scratch
  "b" 'consult-buffer
  "d" 'kill-buffer
  "m" '(e:switch-to-messages-buffer :wk "Messages buffer")
  "s" 'scratch-buffer
  "w" 'read-only-mode)
#+end_src
*** [e] error
#+begin_src emacs-lisp
(e:key-def error e
  "" '(:ignore t :wk "error")
  "S" 'flycheck-set-checker-executable
  "Y" 'e:flycheck-copy-error-ids
  "b" 'flycheck-buffer
  "c" 'flycheck-clear
  "d" 'flycheck-disable-checker
  "e" 'consult-flycheck
  "h" 'flycheck-describe-checker
  "l" 'flycheck-list-errors
  "n" 'flycheck-next-error
  "p" 'flycheck-previous-error
  "s" 'flycheck-select-checker
  "v" 'flycheck-verify-setup
  "x" 'flycheck-explain-error-at-point
  "y" 'flycheck-copy-errors-as-kill)
#+end_src
*** [f] file
#+begin_src emacs-lisp
(e:key-def file f
  "" '(:ignore t :wk "file")
  "S" 'evil-write-all
  "a" 'find-alternate-file
  "e" '(:ignore t :wk "emacs")
  "eI" '(e:file/find-early-init-file :wk "early-init.el")
  "ed" '(e:file/find-config-file :wk "init.org")
  "ei" '(e:file/find-user-init-file :wk "init.el")
  "em" '(e:make-config :wk "Make config")
  "f" 'find-file
  "g" 'affe-grep
  "r" 'consult-recent-file
  "s" 'save-buffer
  "y" '(:ignore t :wk "yank")
  "yD" 'kllib:copy-project-directory-path
  "yY" 'kllib:copy-project-file-path
  "yb" 'kllib:copy-buffer-name
  "yd" 'kllib:copy-directory-path
  "yn" 'kllib:copy-file-name
  "yy" 'kllib:copy-file-path
  "z" 'affe-find)
#+end_src
*** [g] git/vc
#+begin_src emacs-lisp
(e:key-def git g
  "" '(:ignore t :wk "git")
  "L" 'magit-list-repositories
  "S" 'magit-stage-file
  "U" 'magit-unstage-file
  "f" '(:ignore t :wk "file")
  "fc" 'magit-file-checkout
  "fd" 'magit-diff
  "ff" 'magit-find-file
  "fl" 'magit-log-buffer-file
  "fm" 'magit-file-dispatch
  "m" 'magit-dispatch
  "o" 'browse-at-remote
  "s" 'magit-status
  "v" '(:ignore t :wk "vc")
  "vh" 'vc-region-history)
#+end_src
*** [h] help
#+begin_src emacs-lisp
(e:key-def help h
  "" '(:ignore t :wk "help")
  "d" '(:ignore t :wk "describe")
  "dF" 'consult-faces
  "dK" 'describe-keymap
  "da" 'helm-apropos
  "dd" '(:ignore t :wk "devdocs")
  "ddd" 'devdocs-lookup
  "ddi" 'devdocs-install
  "ddl" 'devdocs-lookup
  "ddp" 'devdocs-peruse
  "ddq" 'devdocs-lookup
  "dds" 'devdocs-search
  "ddu" 'devdocs-update-all
  "df" 'describe-function
  "dK" 'find-function-on-key
  "db" 'describe-bindings
  "dk" 'describe-key
  "dm" 'describe-keymap
  "dv" 'describe-variable
  "h" '(:ignore t :wk "helpful")
  "hc" 'helpful-callable
  "hf" 'helpful-function
  "hh" 'helpful-at-point
  "hi" 'helpful-command
  "hk" 'helpful-key
  "hm" 'helpful-macro
  "hs" 'helpful-symbol
  "hv" 'helpful-variable)
#+end_src
*** [j] jump/join ⇔ split
#+begin_src emacs-lisp
(e:key-def jump j
  "" '(:ignore t :wk "jump")
  "d" 'dired-jump
  "i" 'consult-imenu
  "o" 'consult-outline)
#+end_src
*** [l] layout
#+begin_src emacs-lisp
(e:key-def layout l
  "" '(:ignore t :wk "layout")
  "1" '(e:tab-bar-select-tab-1 :wk "tab 1")
  "2" '(e:tab-bar-select-tab-2 :wk "tab 2")
  "3" '(e:tab-bar-select-tab-3 :wk "tab 3")
  "4" '(e:tab-bar-select-tab-4 :wk "tab 4")
  "5" '(e:tab-bar-select-tab-5 :wk "tab 5")
  "6" '(e:tab-bar-select-tab-6 :wk "tab 6")
  "7" '(e:tab-bar-select-tab-7 :wk "tab 7")
  "8" '(e:tab-bar-select-tab-8 :wk "tab 8")
  "9" '(e:tab-bar-select-tab-9 :wk "tab 9")
  "TAB" '(e:tab-switch-last :wk "last")
  "D" 'tab-close-other
  "c" 'tab-new
  "d" 'tab-close
  "l" 'tab-switch
  "n" 'tab-next
  "p" 'tab-previous
  "r" 'tab-rename)
#+end_src
*** [p] project
#+begin_src emacs-lisp
(e:key-def project p
  "" '(:ignore t :wk "project")
  "!" 'projectile-run-shell-command-in-root
  "%" 'projectile-replace-regexp
  "&" 'projectile-run-async-shell-command-in-root
  "D" 'projectile-dired
  "F" 'projectile-find-file-dwim
  "G" 'projectile-regenerate-tags
  "I" 'projectile-invalidate-cache
  "P" 'consult-projectile-switch-project
  "R" 'projectile-replace
  "T" 'projectile-test-project
  "a" 'projectile-toggle-between-implementation-and-test
  "b" 'consult-projectile-switch-to-buffer
  "c" 'projectile-compile-project
  "d" 'consult-projectile-find-dir
  "e" 'projectile-edit-dir-locals
  "f" 'consult-projectile-find-file
  "g" 'projectile-find-tag
  "k" 'projectile-kill-buffers
  "p" 'consult-projectile
  "r" 'consult-projectile-recentf
  "v" 'projectile-vc)
#+end_src
*** [q] quit
#+begin_src emacs-lisp
(e:key-def quit q
  "" '(:ignore t :wk "quit")
  "q" 'exit
  "r" 'restart-emacs)
#+end_src
*** [r] register/rings/resume
#+begin_src emacs-lisp
(e:key-def register r
  "" '(:ignore t :wk "register")
  "l" 'vertico-repeat)
#+end_src
*** [s] search/symbol
#+begin_src emacs-lisp
(e:key-def search s
  "" '(:ignore t :wk "search")
  "D" '(e:consult-ripgrep-cwd-dwim :wk "ripgrep(cwd+dwim)")
  "O" 'symbol-overlay-remove-all
  "S" '(e:consult-line-dwim :wk "consult-line(dwim)")
  "d" '(e:consult-ripgrep-cwd :wk "ripgrep(cwd)")
  "f" 'consult-fd
  "o" 'symbol-overlay-put
  "s" 'consult-line
  "t" 'consult-todo)
#+end_src
*** [t] toggle
#+begin_src emacs-lisp
(e:key-def toggle t
  "" '(:ignore t :wk "toggle")
  "d" 'toggle-debug-on-error
  "l" 'toggle-truncate-lines
  "t" 'consult-minor-mode-menu)
#+end_src
*** [w] window
#+begin_src emacs-lisp
(e:key-def window w
  "" '(:ignore t :wk "window")
  "-" 'split-window-below
  "/" 'split-window-right
  "1" 'delete-other-windows
  "=" 'balance-windows
  "D" 'ace-delete-window
  "H" 'evil-window-move-far-left
  "J" 'evil-window-move-very-bottom
  "K" 'evil-window-move-very-top
  "L" 'evil-window-move-far-right
  "M" 'ace-swap-window
  "U" 'winner-redo
  "W" 'ace-window
  "d" 'delete-window
  "h" 'evil-window-left
  "j" 'evil-window-down
  "k" 'evil-window-up
  "l" 'evil-window-right
  "u" 'winner-undo
  "w" 'other-window)
#+end_src
*** [x] text
#+begin_src emacs-lisp
(e:key-def text x
  "" '(:ignore t :wk "text")
  "A" 'link-hint-open-all-links
  "O" 'link-hint-open-link
  "c" 'count-words-region
  "d SPC" 'cycle-spacing
  "d" '(:ignore t :wk "delete")
  "dl" 'delete-blank-lines
  "dw" 'delete-trailing-whitespace
  "g" '(:ignore t :wk "google/grugru")
  "gQ" 'google-translate-query-translate-reverse
  "gT" 'google-translate-at-point-reverse
  "gg" 'grugru
  "gq" 'google-translate-query-translate
  "gt" 'google-translate-at-point
  "l" '(:ignore t :wk "lines")
  "ls" 'sort-lines
  "m" 'link-hint-open-multiple-links
  "o" 'link-hint-open-link-at-point)
#+end_src
** global-map
#+begin_src emacs-lisp
(general-def global-map
  [remap undo-redo] 'undo-fu-only-redo
  [remap undo] 'undo-fu-only-undo
  [remap yank] 'consult-yank-replace
  "C-*" 'org-support/popup-note
  "C-:" 'org-support/popup-tasks
  "C-;" 'shell-pop
  "C-<" 'evil-jump-backward
  "C->" 'evil-jump-forward
  "C-^" 'ace-window)
#+end_src
** ctl-x-map
#+begin_src emacs-lisp
(general-def ctl-x-map
  "C-c" 'execute-extended-command)
#+end_src
** mode-specific-map
#+begin_src emacs-lisp
(general-def mode-specific-map
  "TAB" 'cape-codeium)
#+end_src
* 設定完了
** 完了処理
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'e:process-high-priority-config-queue)
(add-hook 'emacs-startup-hook #'e:process-low-priority-config-queue)
(setopt e:deferred-config-loaded t)
#+end_src
** 起動時間の計測
#+begin_src emacs-lisp
(when init-file-debug
  (eval-when-compile (require 'profiler))
  (profiler-report)
  (profiler-stop))
#+end_src
